import 'dart:convert';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';
import 'package:crypto/crypto.dart';
import 'package:encrypt/encrypt.dart' as encrypt;

const String KEY_ENCRYPT = "703a27c1d227676yfe6fb1d9134a4411";

class EncryptionUtil {
  static List<int> _generateKey() {
    final keyBytes = utf8.encode(KEY_ENCRYPT);
    final sha256Key = sha256.convert(keyBytes).bytes;
    return sha256Key;
  }

  static encrypt.IV _generateIV() {
    final random = Random.secure();
    final ivBytes = List<int>.generate(16, (_) => random.nextInt(256));
    return encrypt.IV(Uint8List.fromList(ivBytes));
  }

  static String encryptString(String plainText) {
    try {
      final key = encrypt.Key(Uint8List.fromList(_generateKey()));
      final iv = _generateIV();

      final encrypter = encrypt.Encrypter(
        encrypt.AES(key, mode: encrypt.AESMode.cbc, padding: 'PKCS7'),
      );

      final encrypted = encrypter.encrypt(plainText, iv: iv);
      final combinedBytes = iv.bytes + encrypted.bytes;
      return base64Encode(combinedBytes);
    } catch (e) {
      print('(EncryptionUtil.encrypt error) req: $plainText | message: $e');
      return plainText;
    }
  }

  static String decryptString(String encryptedText) {
    try {
      final key = encrypt.Key(Uint8List.fromList(_generateKey()));
      final combined = base64Decode(encryptedText);

      final ivBytes = combined.sublist(0, 16);
      final cipherBytes = combined.sublist(16);

      final iv = encrypt.IV(Uint8List.fromList(ivBytes));
      final encrypter = encrypt.Encrypter(
        encrypt.AES(key, mode: encrypt.AESMode.cbc, padding: 'PKCS7'),
      );

      final decrypted = encrypter.decrypt(
        encrypt.Encrypted(Uint8List.fromList(cipherBytes)),
        iv: iv,
      );

      return decrypted;
    } catch (e) {
      print('(EncryptionUtil.decrypt error) req: $encryptedText | message: $e');
      return encryptedText;
    }
  }
}

void main() async {
  print(
    "=== üîê Nh·∫≠p c√°c c·∫∑p key:value (Enter ƒë·ªÉ xu·ªëng d√≤ng, Enter 2 l·∫ßn ƒë·ªÉ k·∫øt th√∫c) ===",
  );

  final Map<String, String> data = {};
  String? line;
  String lastLine = '';

  // Nh·∫≠p d·ªØ li·ªáu t·ª´ terminal
  while (true) {
    stdout.write("> ");
    line = stdin.readLineSync();

    // N·∫øu ng∆∞·ªùi d√πng nh·∫•n Enter 2 l·∫ßn li√™n ti·∫øp
    if (line != null && line.trim().isEmpty && lastLine.trim().isEmpty) {
      break;
    }

    if (line != null && line.trim().isNotEmpty) {
      final parts = line.split(':');
      if (parts.length >= 2) {
        final key = parts[0].trim();
        final value = parts.sublist(1).join(':').trim();
        data[key] = value;
      } else {
        print("‚ö†Ô∏è  ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá! H√£y nh·∫≠p d·∫°ng key:value");
      }
    }
    lastLine = line ?? '';
  }

  if (data.isEmpty) {
    print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ m√£ h√≥a.");
    return;
  }

  // S·∫Øp x·∫øp key ƒë·ªÉ k·∫øt qu·∫£ nh·∫•t qu√°n
  final sortedMap = Map.fromEntries(
    data.entries.toList()..sort((a, b) => a.key.compareTo(b.key)),
  );

  // Convert Map th√†nh JSON string
  final jsonString = jsonEncode(sortedMap);
  print("\nüìù Chu·ªói JSON g·ªëc: $jsonString");

  // M√£ h√≥a
  final encryptedPayload = EncryptionUtil.encryptString(jsonString);
  print("\nüîí Payload ƒë√£ m√£ h√≥a:\n$encryptedPayload");

  // Gi·∫£i m√£
  final decryptedJsonString = EncryptionUtil.decryptString(encryptedPayload);
  print("\nüîì Chu·ªói JSON ƒë√£ gi·∫£i m√£:\n$decryptedJsonString");

  final decryptedObject = jsonDecode(decryptedJsonString);
  print("\nüì¶ Object sau gi·∫£i m√£: $decryptedObject");
}
